tests:
  - name: "Function with generic return value valid"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_return_type.jk"
    exit_code: 0
    # FIXME: Do not ignore once #496 is fixed
    # - name: "Function with generic return value invalid"
    #   binary: "target/debug/jinko"
    #   args:
    #     - "tests/ft/generics/invalid_return_type.jk"
    #   exit_code: 1
  - name: "Valid generic id()"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_id.jk"
    exit_code: 0
  - name: "Undeclared return type"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/undeclared_return_generic.jk"
    exit_code: 1
    # FIXME: Do not ignore once #476 is fixed
    # - name: "Undeclared type in arguments"
    #   binary: "target/debug/jinko"
    #   args:
    #     - "tests/ft/generics/undeclared_arg_generic.jk"
    #   exit_code: 1
  - name: "Valid call to same generic fn twice"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_call_generic_twice.jk"
    exit_code: 0
  - name: "Valid use of ducktyping"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_ducktyping.jk"
    exit_code: 0
  - name: "Valid multi-use of ducktyping"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_multiple_ducktyping.jk"
    exit_code: 0
  - name: "Invalid use of ducktyping"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/invalid_ducktyping.jk"
    exit_code: 1
  - name: "Valid generic on field access"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_field_access.jk"
    exit_code: 159
  - name: "Valid generic on if else block"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_if_else.jk"
    exit_code: 0
  - name: "Valid generic on method call"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_method_call.jk"
    exit_code: 0
  - name: "Invalid typechecking on function call"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/invalid_typechecking.jk"
    exit_code: 1
  - name: "Valid simple generic type"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_simple_type.jk"
    exit_code: 15
      # FIXME: Don't ignore once #408 is fixed
      # - name: "Valid nested simple generic type"
      #   binary: "target/debug/jinko"
      #   args:
      #     - "tests/ft/generics/valid_nested_type.jk"
      #   exit_code: 15
  - name: "Generic expansion in usage"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_type_when_resolving.jk"
    exit_code: 15
  - name: "Generic expansion in inner fn"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_inner_fn.jk"
    exit_code: 15
  - name: "Generic expansion in inner fn"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_inner_fn.jk"
    exit_code: 15
  - name: "Generic expansion in inner type"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/valid_inner_type_when_resolving.jk"
    exit_code: 15
      # FIXME: Don't ignore to pass #408
      # - name: "Generic stress test"
      #   binary: "target/debug/jinko"
      #   args:
      #     - "--check"
      #     - "tests/ft/generics/maybe_simple.jk"
      #   exit_code: 0
  - name: "Specialized type as argument type"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/specialized_ty_in_func_arg.jk"
    exit_code: 0
  - name: "Field access on specialized type"
    binary: "target/debug/jinko"
    args:
      - "tests/ft/generics/field_access_on_specialized_ty_in_func_arg.jk"
    exit_code: 0
